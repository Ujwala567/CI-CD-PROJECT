# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  # Remove the lower() function - we'll handle lowercase differently
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [frontend, backend, auth-service, user-service, order-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies for ${{ matrix.service }}
        run: npm ci
        working-directory: ./${{ matrix.service }}
      
      - name: Run tests for ${{ matrix.service }}
        run: npm test
        working-directory: ./${{ matrix.service }}
        env:
          CI: true
          NODE_ENV: test

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker images
        run: |
          # Convert to lowercase in the shell command
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          echo "🔨 Building Docker images with prefix: $REPO_LOWER"
          
          # Build frontend
          docker build -t ${{ env.REGISTRY }}/$REPO_LOWER-frontend:latest ./frontend
          
          # Build backend
          docker build -t ${{ env.REGISTRY }}/$REPO_LOWER-backend:latest ./backend
          
          # Build auth service
          docker build -t ${{ env.REGISTRY }}/$REPO_LOWER-auth:latest ./auth-service
          
          # Build user service
          docker build -t ${{ env.REGISTRY }}/$REPO_LOWER-user:latest ./user-service
          
          # Build order service
          docker build -t ${{ env.REGISTRY }}/$REPO_LOWER-order:latest ./order-service
          
          echo "🎉 All Docker images built successfully!"
      
      - name: Push Docker images to registry
        run: |
          # Convert to lowercase in the shell command
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          echo "📤 Pushing Docker images to Docker Hub..."
          
          # Push all images
          docker push ${{ env.REGISTRY }}/$REPO_LOWER-frontend:latest
          docker push ${{ env.REGISTRY }}/$REPO_LOWER-backend:latest
          docker push ${{ env.REGISTRY }}/$REPO_LOWER-auth:latest
          docker push ${{ env.REGISTRY }}/$REPO_LOWER-user:latest
          docker push ${{ env.REGISTRY }}/$REPO_LOWER-order:latest
          
          echo "🎉 All images pushed to Docker Hub successfully!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-linux-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Send deployment notification
        run: |
          echo "🚀 DEPLOYMENT PIPELINE COMPLETED SUCCESSFULLY!"
          echo "=============================================="
          echo "📦 Services Built and Pushed to Docker Hub"
          echo "✅ All tests passed"
          echo "✅ Security scan completed"
          echo "📋 READY FOR PRODUCTION DEPLOYMENT!"
          