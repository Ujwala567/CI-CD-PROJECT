# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ lower(github.repository) }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [frontend, backend, auth-service, user-service, order-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Detect service type and setup
        id: setup
        run: |
          SERVICE_DIR="./${{ matrix.service }}"
          if [ ! -d "$SERVICE_DIR" ]; then
            echo "Service directory $SERVICE_DIR not found"
            exit 1
          fi
          
          # Check if it's a Node.js project
          if [ -f "$SERVICE_DIR/package.json" ]; then
            echo "runtime=nodejs" >> $GITHUB_OUTPUT
            echo "cache-file=package-lock.json" >> $GITHUB_OUTPUT
          elif [ -f "$SERVICE_DIR/requirements.txt" ]; then
            echo "runtime=python" >> $GITHUB_OUTPUT
            echo "cache-file=requirements.txt" >> $GITHUB_OUTPUT
          else
            echo "runtime=unknown" >> $GITHUB_OUTPUT
            echo "cache-file=none" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        if: steps.setup.outputs.runtime == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/${{ steps.setup.outputs.cache-file }}
      
      - name: Setup Python
        if: steps.setup.outputs.runtime == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: ${{ matrix.service }}/${{ steps.setup.outputs.cache-file }}
      
      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
        working-directory: ./${{ matrix.service }}
      
      - name: Run tests
        run: |
          if [ -f "package.json" ]; then
            npm test
          elif [ -f "requirements.txt" ]; then
            pytest tests/ -v
          else
            echo "No test command found for ${{ matrix.service }}"
          fi
        working-directory: ./${{ matrix.service }}
        env:
          CI: true
          NODE_ENV: test
      
      - name: Build service
        run: |
          if [ -f "package.json" ] && [ -f "package.json" ]; then
            npm run build
          elif [ -f "setup.py" ]; then
            python setup.py build
          fi
        working-directory: ./${{ matrix.service }}
        env:
          NODE_ENV: production

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
      
      - name: Build Docker images
        run: |
          set -e
          
          echo "🔨 Building Docker images..."
          
          # Build frontend
          if [ -d "./frontend" ] && [ -f "./frontend/Dockerfile" ]; then
            echo "📦 Building frontend image..."
            docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:latest ./frontend
            echo "✅ Frontend image built successfully"
          else
            echo "⚠️  Frontend directory or Dockerfile not found"
          fi
          
          # Build backend
          if [ -d "./backend" ] && [ -f "./backend/Dockerfile" ]; then
            echo "📦 Building backend image..."
            docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest ./backend
            echo "✅ Backend image built successfully"
          else
            echo "⚠️  Backend directory or Dockerfile not found"
          fi
          
          # Build auth service
          if [ -d "./auth-service" ] && [ -f "./auth-service/Dockerfile" ]; then
            echo "📦 Building auth service image..."
            docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest ./auth-service
            echo "✅ Auth service image built successfully"
          else
            echo "⚠️  Auth service directory or Dockerfile not found"
          fi
          
          # Build user service
          if [ -d "./user-service" ] && [ -f "./user-service/Dockerfile" ]; then
            echo "📦 Building user service image..."
            docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:latest ./user-service
            echo "✅ User service image built successfully"
          else
            echo "⚠️  User service directory or Dockerfile not found"
          fi
          
          # Build order service
          if [ -d "./order-service" ] && [ -f "./order-service/Dockerfile" ]; then
            echo "📦 Building order service image..."
            docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-order:latest ./order-service
            echo "✅ Order service image built successfully"
          else
            echo "⚠️  Order service directory or Dockerfile not found"
          fi
          
          echo "🎉 All Docker images built successfully!"
      
      - name: Run container tests
        run: |
          set -e
          
          echo "🧪 Testing built containers..."
          
          # Test backend container
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest >/dev/null 2>&1; then
            echo "🔍 Testing backend container..."
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest node -e "console.log('✅ Backend container works!')" || \
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest python -c "print('✅ Backend container works!')"
          fi
          
          # Test auth container
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest >/dev/null 2>&1; then
            echo "🔍 Testing auth container..."
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest node -e "console.log('✅ Auth container works!')" || \
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest python -c "print('✅ Auth container works!')"
          fi
          
          # Test user container
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:latest >/dev/null 2>&1; then
            echo "🔍 Testing user container..."
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:latest node -e "console.log('✅ User container works!')" || \
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:latest python -c "print('✅ User container works!')"
          fi
          
          # Test order container
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-order:latest >/dev/null 2>&1; then
            echo "🔍 Testing order container..."
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-order:latest node -e "console.log('✅ Order container works!')" || \
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-order:latest python -c "print('✅ Order container works!')"
          fi
          
          echo "✅ All containers are working correctly!"
      
      - name: Push Docker images to registry
        run: |
          set -e
          
          echo "📤 Pushing Docker images to Docker Hub..."
          
          # Push frontend
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:latest >/dev/null 2>&1; then
            echo "🚀 Pushing frontend image..."
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:latest
            echo "✅ Frontend image pushed successfully!"
          fi
          
          # Push backend
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest >/dev/null 2>&1; then
            echo "🚀 Pushing backend image..."
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest
            echo "✅ Backend image pushed successfully!"
          fi
          
          # Push auth service
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest >/dev/null 2>&1; then
            echo "🚀 Pushing auth service image..."
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest
            echo "✅ Auth service image pushed successfully!"
          fi
          
          # Push user service
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:latest >/dev/null 2>&1; then
            echo "🚀 Pushing user service image..."
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:latest
            echo "✅ User service image pushed successfully!"
          fi
          
          # Push order service
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-order:latest >/dev/null 2>&1; then
            echo "🚀 Pushing order service image..."
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-order:latest
            echo "✅ Order service image pushed successfully!"
          fi
          
          echo "🎉 All images pushed to Docker Hub successfully!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: 1
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit for Node.js services
        run: |
          for service in frontend backend auth-service user-service order-service; do
            if [ -d "$service" ] && [ -f "$service/package.json" ]; then
              echo "🔍 Running npm audit for $service..."
              cd $service
              npm audit --audit-level=high || true
              cd ..
            fi
          done

  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Send deployment notification
        run: |
          echo "🚀 DEPLOYMENT PIPELINE COMPLETED SUCCESSFULLY!"
          echo "=============================================="
          echo "📦 Services Built and Pushed:"
          echo "   • Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:latest"
          echo "   • Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest"
          echo "   • Auth: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest"
          echo "   • User: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:latest"
          echo "   • Order: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-order:latest"
          echo ""
          echo "✅ All tests passed"
          echo "✅ All containers built and tested"
          echo "✅ Security scan completed"
          echo "✅ Images pushed to Docker Hub"
          echo ""
          echo "📋 READY FOR PRODUCTION DEPLOYMENT!"
          echo "=============================================="
      
      - name: Send Slack notification
        if: always() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 CI/CD Pipeline completed for ${{ github.repository }}
            • Status: ${{ job.status }}
            • Branch: ${{ github.ref }}
            • Commit: ${{ github.sha }}
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Branch", "value": "${{ github.ref }}", "short": true},
              {"title": "Status", "value": "${{ job.status }}", "short": true},
              {"title": "Triggered by", "value": "${{ github.actor }}", "short": true}
            ]
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          