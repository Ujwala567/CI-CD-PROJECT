name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend
      
      - name: Build frontend
        run: npm run build
        working-directory: ./frontend
        env:
          CI: false

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker images
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:latest ./frontend
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest ./backend
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest ./auth-service
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:latest ./user-service
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-order:latest ./order-service
      
      - name: Run container tests
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest node -e "console.log('Backend container works!')"
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:latest node -e "console.log('Auth container works!')"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Send deployment notification
        run: |
          echo "🚀 Deployment pipeline completed successfully!"
          echo "📦 Services built: Frontend, Backend, Auth, User, Order"
          echo "🔧 Ready for production deployment!"
